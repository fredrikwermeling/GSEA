###############################################################################
#  generic_mouse_ORA.R                                                        #
#                                                                             #
#  A lightweight over‑representation workflow for mouse hit lists             #
#  ------------------------------------------------------------------------   #
#  • Reads a plain‑text file (one gene ID per line)                            #
#  • Supports MGI symbols, Ensembl IDs, and Entrez IDs                        #
#  • Converts to Entrez, with an optional manual‑map for awkward genes        #
#  • Runs ORA against:                                                        #
#       – GO:Biological Process                                               #
#       – KEGG mouse pathways                                                 #
#       – Reactome mouse pathways                                             #
#       – MSigDB Hallmark (H)                                                 #
#       – MSigDB C7 Immunologic                                               #
#       – A focused interferon panel (2 Hallmarks + Reactome IFN pathway)     #
#  • Writes a dated, numbered output folder with:                             #
#       – CSV tables (Entrez **and** symbol lists)                            #
#       – Bar & dot PNGs for every library with ≥ 1 significant term          #
###############################################################################

## ---------------- user settings ------------------------------------------
input_file  <- "genes.txt"  # one ID per line
p_cut       <- 0.10         # BH‑adjusted FDR threshold
manual_ids  <- c(           # fallback symbol → Entrez map (edit as needed)
)
## ------------------------------------------------------------------------

suppressPackageStartupMessages({
  if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager", quiet = TRUE)

  BiocManager::install(
    c("clusterProfiler", "org.Mm.eg.db", "ReactomePA",
      "msigdbr", "enrichplot", "tidyverse", "msigdbdf"),
    update = FALSE, ask = FALSE, quiet = TRUE
  )

  library(clusterProfiler)
  library(org.Mm.eg.db)
  library(ReactomePA)
  library(msigdbr)
  library(enrichplot)
  library(tidyverse)
})

# ---------- helper: ID conversion -------------------------------------------
convert_to_entrez <- function(id_vec, extra = NULL, orgdb = org.Mm.eg.db) {
  ens <- id_vec[grepl("^ENS",  id_vec)]
  sym <- id_vec[grepl("^[A-Za-z]", id_vec) & !id_vec %in% ens]

  tbl_sym <- bitr(sym, "SYMBOL",  "ENTREZID", OrgDb = orgdb)
  tbl_ens <- bitr(ens, "ENSEMBL", "ENTREZID", OrgDb = orgdb)
  tbl_man <- tibble(SYMBOL = names(extra), ENTREZID = unname(extra))

  bind_rows(tbl_sym, tbl_ens, tbl_man) %>%
    distinct(ENTREZID, .keep_all = TRUE) %>%
    pull(ENTREZID)
}

# ---------- helper: add symbols to result -----------------------------------
add_symbols <- function(res, orgdb = org.Mm.eg.db) {
  r_sym <- setReadable(res, OrgDb = orgdb, keyType = "ENTREZID")
  left_join(as.data.frame(res),
            as.data.frame(r_sym)[, c("ID", "geneID")],
            by = "ID",
            suffix = c("_Entrez", "_Symbol"))
}

# ---------- helper: save CSV + bar/dot PNGs ----------------------------------
write_res <- function(res, tag, out_dir, topN = 15) {
  out_csv <- file.path(out_dir, paste0(tag, ".csv"))
  write.csv(add_symbols(res), out_csv, row.names = FALSE)

  if (nrow(res@result) == 0) return(invisible())

  for (plt in c("bar", "dot")) {
    png(file.path(out_dir, sprintf("%s_%s.png", tag, plt)),
        2000, 1300, res = 220)
    g <- switch(plt,
                bar = barplot(res, showCategory = min(topN, nrow(res@result))),
                dot = dotplot(res, showCategory = min(topN, nrow(res@result))))
    print(g)
    dev.off()
  }
}

# ---------------- read gene list ---------------------------------------------
if (!file.exists(input_file))
  stop("file not found: ", input_file)

hit_genes <- readLines(input_file) %>%
             trimws() %>%
             discard(~ .x == "")

# example tidy‑up: convert verbose sulfatase description to 'Sts'
hit_genes[grepl("^steroid sulfatase", tolower(hit_genes))] <- "Sts"
hit_genes <- unique(hit_genes)

entrez_hits <- convert_to_entrez(hit_genes, manual_ids)
cat("Mapped", length(entrez_hits), "of", length(hit_genes), "genes\n")

# ---------------- enrichment --------------------------------------------------
ego_bp <- enrichGO(entrez_hits, OrgDb = org.Mm.eg.db, ont = "BP",
                   keyType = "ENTREZID", pvalueCutoff = p_cut, qvalueCutoff = p_cut)

ekegg  <- enrichKEGG(entrez_hits, organism = "mmu", pvalueCutoff = p_cut)
ereact <- enrichPathway(entrez_hits, organism = "mouse", pvalueCutoff = p_cut)

msig_H <- msigdbr("Mus musculus", category = "H")
msig_C7<- msigdbr("Mus musculus", category = "C7")

ehall <- enricher(entrez_hits,
                  TERM2GENE = msig_H %>% select(gs_name, entrez_gene),
                  pvalueCutoff = p_cut)
eC7   <- enricher(entrez_hits,
                  TERM2GENE = msig_C7 %>% select(gs_name, entrez_gene),
                  pvalueCutoff = p_cut)

# focused IFN sets
ifn_H <- msig_H %>%
         filter(gs_name %in% c("HALLMARK_INTERFERON_ALPHA_RESPONSE",
                               "HALLMARK_INTERFERON_GAMMA_RESPONSE"))
ifn_R <- msigdbr("Mus musculus", category = "C2", subcategory = "CP:REACTOME") %>%
         filter(gs_name == "REACTOME_INTERFERON_SIGNALING")

e_ifnH <- enricher(entrez_hits,
                   TERM2GENE = ifn_H %>% select(gs_name, entrez_gene),
                   pvalueCutoff = p_cut)
e_ifnR <- enricher(entrez_hits,
                   TERM2GENE = ifn_R %>% select(gs_name, entrez_gene),
                   pvalueCutoff = p_cut)

# ---------------- output directory -------------------------------------------
today  <- format(Sys.Date(), "%Y-%m-%d")
index  <- 1
repeat {
  out_dir <- sprintf("ORA_%s_%03d", today, index)
  if (!dir.exists(out_dir)) break
  index <- index + 1
}
dir.create(out_dir)

# ---------------- save everything --------------------------------------------
write_res(ego_bp,  "GO_BP",       out_dir)
write_res(ekegg,   "KEGG",        out_dir)
write_res(ereact,  "Reactome",    out_dir)
write_res(ehall,   "Hallmark",    out_dir)
write_res(eC7,     "C7_Immune",   out_dir)
write_res(e_ifnH,  "IFN_Hallmark",out_dir)
write_res(e_ifnR,  "IFN_Reactome",out_dir)

cat("✓  ORA completed — results in", out_dir, "\n")
